linkcolor
black
bottom:1em
p+pmargin
top:1em;margin
imgborder:0px
alt="previous"]back.png
alt="up"]up.png
alt="next"]next.png
dsp
b.
downey
allen
june
exerciseexercise[chapter
version
press
tea
green
needham
massachusetts
copyright
washburn
ave
ma
document
permission
terms
creative
commons
international
sharealike
attribution
noncommercial
license
available
http://creativecommons.org/licenses/by-nc-sa/4.0/
book
source
http://think-dsp.com
chapter
preface
signal
topics
favorite
useful
processing
areas
engineering
science
insight
things
fundamental
ideas
world
electrical
mechanical
chance
classes
books
problem
mathematical
abstractions
material
theoretical
phasors
applications
little
relevance
apparent
premise
skill
fun
approach
important
programming
end
sounds
signals
sound
new
recordings
application
technique
real
step
practical
§
examples
code
python
core
features
familiar
object
objects
introduction
people
mark
better
learning
lutz
experience
scipy
numpy
functions
great
structures
data
basic
complex
mathematics
reader
concepts
calculus
numbers
integration
differentiation
linear
algebra
samples
https://github.com/allendowney/thinkdsp
git
files
control
track
system
collection
project
service
repository
github
convenient
interface
storage
web
repositories
homepage
ways
copy
button
fork
account
repo
computer
able
changes
clone
file
zip
corner
lower
right
page
translation
anaconda
analytics
free
continuum
distribution
packages
lots
easy
level
default
user
administrative
installation
privileges
https://www.anaconda.com/distribution/
following
computation
numerical
scientific
matplotlib
http://matplotlib.org/
visualization
hard
installations
trouble
environments
distributions
exercises
scripts
jupyter
notebooks
server
command
line
browser
window
tab
open
binder
machine
virtual
link
http://mybinder.org/repo/allendowney/thinkdsp
home
temporary
idle
hour
nbviewer
links
results
view
static
interactive
widgets
luck
good
list
contributor
suggestion
email
correction
change
feedback
contributors
sentence
error
fine
section
thanks
thoughts
conversations
google
harb
ramos
systems
music
harmonix
aurelio
daniher
ian
semester
fall
lintz
nathan
independent
study
draft
reddit
forum
anonymous
noise
implementation
brownian
typo
andodli
pleasure
spring
govindasamy
siddhartan
miranda
prof
oscar
mur
suggestions
corrections
arithmetic
gyger
silas
number
masetti
helpful
giuseppe
peters
eric
freesound
special
users
wave
original
names
sources
iluppai
thirsk
kleeb
themusicalnomad
docquesting
landup
zippi1
wcfl10
bcjordan
marcgascon7
jcveliz
rockwehrmann
time
quantity
abstract
concrete
definition
example
pressure
variation
air
variations
device
microphone
speaker
transducers
microphones
speakers
form
processes
methods
electronic
vibration
domains
space
trail
elevation
dimension
image
movie
dimensional
simple
chap01.ipynb
ref
http://tinyurl.com/thinkdsp01
periodic
recording
bell
segment
period
figure
sinusoid
function
trigonometric
shape
sine
duration
repetitions
cycles
ms
cycle
frequency
second
inverse
units
hertz
dimensionless
hz
standard
tuning
orchestral
pitch
a4
musical
note
suffix
notation
middle
octave
c.
a5
http://en.wikipedia.org/wiki/scientific_pitch_notation
violin
tines
instruments
harmonic
motion
sinusoidal
playing
quintet
3rd
boccherini
e
string
movement
waveforms
waveform
timbre
perception
quality
warm
rich
interesting
sinusoids
spectral
decomposition
spectrum
topic
sum
idea
frequencies
different
discrete
fourier
transform
dft
set
algorithm
fast
fft
efficient
way
axis
x
range
y
strength
amplitude
component
lowest
flat
largest
dominant
spikes
multiples
integer
components
harmonics
harmonious
higher
doubling
perfect
fifth
e6
intervals
a6
octaves
major
notes
chord
approximate
western
equal
temperament
http://en.wikipedia.org/wiki/equal_temperament
amplitudes
thinkdsp.py
module
spectrums[the
spectra
plural
plurals
english
strange
choice
class
thinkdsp
types
parent
cosine
freq
unspecified
amp
phase
offset
radians
offset=0
sin
0
pi/2
sinπ/2
method
operator
sumsignal
result
representation
values
t
infinity
negative
sequence
ys
context
evaluate
ts
points
arrays
frame
term
point
movies
video
measurement
sample
length
seconds
start
framerate
frames
framerates
wav
formats
mp3
audio
t=0.5
half
timestep
μs
plot
pyplot
mixture
periods
freq=440
color
solid
small
block
property
copies
mix
complicated
waves
write
media
player
robust
aplay
unix
linux
subprocess
spectrums
pass
low
filter
cutoff
factor
magnitude
high
band
attenuates
cutoffs
bright
darker
play
widget
relationships
thin
wrappers
primary
vice
array
attributes
times
unit
days
properties
shifts
common
operations
transformations
documentation
child
kinds
parameters
arbitrary
corresponds
input
maximum
output
reasons
func
particular
np.sin
np.cos
init
future
use
self.freq
element
product
stores
pi2
π
constant
converts
self.offset
effect
self.func
value
+1
multiplying
yields
math
cos
ϕ_0
f
lot
expression
framework
instructions
solutions
chap01soln.ipynb
load
notebook
speech
compute
connection
structure
cossignal
sinsignal
compound
stretch
hint
lines
phenomena
digital
aliasing
works
chap02.ipynb
triangle
peak
peaks
dfts
relationship
straight
thinkdsp.trianglesignal
trianglesignal
arguments
difference
details
fraction
np.modf
frac
variable
convention
underscore
ramps
-0.5
absolute
zags
unbias
vertical
cuts
scales
views
highest
additional
surprise
odd
feature
proportion
ratio
square
squaresignal
similar
fractional
np.sign
positive
-amp
drops
squared
confession
previous
confusing
fourth
information
identical
gray
easier
clear
indistinguishable
reason
sampling
rate
threshold
nyquist
http://en.wikipedia.org/wiki/nyquist_frequency
folding
pattern
5th
-2100
fact
n
self
parameter
np.fft
rfft
hs
fs
rfftfreq
imaginary
iy
coordinates
cartesian
e^i
exponential
angle
ϕ
polar
argument
corresponding
proportional
angles
magnitudes
amps
tempting
parts
vector
offsets
elements
sets
chapters
chap02soln.ipynb
sawtooth
repeats
sawtoothsignal
spectrum.hs[0
experiment
print
operation
division
undefined
drop
f^2
non
words
spectrograms
chap03.ipynb
http://tinyurl.com/thinkdsp03
chirp
beginning
a3
segments
np.linspace
adjacent
np.diff
interval
dts
δ
short
δϕ
f(t
freqs
total
cumulative
computes
np.insert
ith
dphis
limit
dϕ
dt
derivative
cumsum
integral
s
spans
logarithm
pitches
bigger
series
np.logspace
logarithms
chirps
eye
sauron
http://en.wikipedia.org/wiki/sauron
observation
looks
hints
spectrogram
stft
column
grayscale
power
shows
increases
curve
limited
resolution
blurring
cells
gabor
width
height
n/2
r
n.
rapid
notice
smaller
double
bad
tradeoff
analysis
limitation
kind
leakage
left
windowed
order
windowing
treats
complete
finite
infinite
practice
false
problems
assumption
discontinuity
loop
multiple
behaves
single
signal.period
spread
energy
leaks
discontinuous
hamming
optimal
purpose
close
unchanged
tapers
ends
bartlett
blackman
hanning
kaiser
windows
longest
indices
j
slice
timestamp
dictionary
nominal
midpoint
pseudocolor
chap03soln.ipynb
http://docs.scipy.org/doc/numpy/reference/routines.window.html
sawtoothchirp
decreases
sketch
khz
terminology
glissando
rhapsody
george
gershwin
blue
starts
clarinet
famous
http://archive.org/details/rhapblue11924
trombone
slide
tube
speed
trombonegliss
c3
f3
vowel
vowels
unwanted
unpleasant
senses
chap04.ipynb
uncorrelated
uniform
simplest
uu
random
likely
uncorrelateduniformnoise
usual
np.random.uniform
channels
radio
look
conventional
word
precise
possible
probabilities
probability
alternative
gaussian
correlation
dependencies
average
pink
mean
f.
integratedspectrum
self.power
powers
white
light
analogy
visible
fluid
particle
moves
unseen
interactions
model
walk
distance
steps
path
location
browniannoise
successive
scale
log
noisy
squares
fit
f=0
scipy.stats.linregress
slope
coefficient
r^2
intercept
determination
purposes
p
k
sides
e^k
relevant
characteristic
red
brown
β=1
exponent
f^β
beta
pinknoise
irrelevant
f^β/2
case
bias
normal
ug
deviation
theory
claim
graphical
normalprobabilityplot
thinkstats2
plots
think
http://thinkstats2.com
stats
dark
extremes
central
theorem
large
chap04soln.ipynb
natural
soft
site
murmur
rain
wind
run
long
http://en.wikipedia.org/wiki/bartlett's_method
daily
csv
bitcoin
price
prices
counter
geiger
radiation
detector
surge
current
poisson
particles
uncorrelatedpoissonnoise
np.random.poisson
lam
clicks
expensive
alternatives
mccartney
voss
research
autocorrelation
tool
chap05.ipynb
http://tinyurl.com/thinkdsp05
general
variables
moment
pearson
∑_i
μ_y)/n
y_i
ρ
μ_x
σ_x
σ_y
x_i
means
μ_y
deviations
prediction
weak
nonlinear
statistics
matrix
pair
np.corrcoef
correlations
radian
ddof=0
option
corrcoef
n-1
equation
wave1
wave2
diagonal
interested
moderate
degrees
circle
serial
quantities
measurements
represent
voltage
shifted
lag
places
strong
greater
sure
sense
intermediate
β=0
lags
maps
autocorr
sequences
integers
larger
stronger
phenomenon
dependence
vocal
freesound.org
c5
e4
semitones
big
longer
trial
process
t=0.2
lag=101
estimate
precision
cents
semitone
dot
consistent
definitions
unbiased
simplifies
n∑_i
vectors
formula
y.
degree
cosθ
θ
np.correlate
correlate
mode
-n/2
symmetric
unstandardized
overlap
lengths
adjustments
curious
chap05soln.ipynb
autocorrelations
interaction
estimates
bitcoins
historical
evidence
behavior
noises
hart
vi
excellent
related
dct
jpeg
images
mpeg
family
synthesis
performance
solution
slow
principles
chap06.ipynb
http://tinyurl.com/thinkdsp06
sharp
g2
synthesize
thing
outer
row
t.
args
columns
np.dot
multiplies
wise
products
weighted
nth
kth
f_k
d
letters
m.
c
b
versions
ys1
biggest
errors
ys2
concise
matrices
⊗
symbol
ready
cosines
linalg.solve
hitch
equations
rows
unknowns
unlikely
simplicity
analyze1
amps2
n^3
orthogonal
m^-1
m
identity
i.
m^-1y
multiplication
n^2
cases
transpose
m^t
m^tm
synthesize2
millisecond
minute
approximation
√(2)/2
cosπ/4
iv
roman
numeral
test1
-0
analyze
np.linalg.solve
test2
analyze2
returns
1e-16
type
ii
scipy.fftpack
scipy.fftpack.idct
starter
chap06starter.ipynb
chap06soln.ipynb
true
sizes
magic
size
scipy.fftpack.dct
compression
break
identify
inaudible
store
perceptible
sparse
implementations
experiments
exponentials
progression
equivalent
chap07.ipynb
generalization
factorial
inclination
certain
leonhard
euler
gamma
http://en.wikipedia.org/wiki/gamma_function
generalizations
exponentiation
ϕ^3
ϕ·ϕ·ϕ.
exponents
e^ϕ
extension
pure
iϕ
iϕ^3/3
e^iϕ
cosϕ
derivation
http://en.wikipedia.org/wiki/euler's_formula
plane
ϕ.
e^a
exp
np.exp
np.complex128
bit
0.997j
imag
abs
np.angle
ϕ(t
cosϕ(t
complexsinusoid
sinusoid.evaluate
intuition
satisfying
answer
unsatisfying
best
question
abstraction
sines
proportions
ears
running
interpretation
expi
phi
reals
quarter
a.
work
unitary
conjugate
http://en.wikipedia.org/wiki/unitary_matrix
conj
m^
m^*m
tolerance
extra
faster
appropriate
correct
analyze3
dft(idft(amps
presentation
√(n
stuck
weird
summation
y[n
exp(-2
∑_n
index
k+n
k+2n
dft(y)[k+n
diagram
similarity
np.fft.rfft
body
actual
past
chap07soln.ipynb
explanations
multiplications
lanczos
danielson
lemma
key
dft(o)[n
o
recursive
calls
dft(y
base
recursion
precomputed
working
np.fft.fft
https://en.wikipedia.org/wiki/fast_fourier_transform
filtering
convolution
smoothing
chap08.ipynb
http://tinyurl.com/thinkdsp08
day
closing
facebook
moving
stock
trends
december
raw
extreme
shorter
zeros
prod
elementwise
-1
smoothed
padded
edge
levels
transition
transitions
abrupt
corners
buzzy
simpler
np.convolve
flag
cross
∑_m=0^n-1
f[m
⋆
g[n+m
g)[n
g
n+m
g[n
backward
careful
basis
domain
muffled
ok
convolve
ratios
boxcar
bounces
sidelobes
rectangular
railway
car
computations
sections
job
exp(-f^2
states
idft
pandas
dataframe
df
bogus
m-1
digits
fft_correlate
mode='same
lag=0
pad
trick
necessary
invalid
direction
np.flipud
rest
valid
padding
auto
strategy
trimming
nuisance
libraries
chap08soln.ipynb
wrong
std
addition
filters
chap09.ipynb
differences
opening
-1.9
operators
diff
differentiate
e_f
e_f(t
π/2
effects
language
eigenfunctions
eigenfunction
eigenvalue
http://en.wikipedia.org/wiki/eigenfunction
scalar
g.
λ
harder
differentiated
multiply
comparison
noisier
artifacts
boundaries
derivatives
differential
http://en.wikipedia.org/wiki/spectral_method
invariant
nan
surprising
unknown
parabolic
denom.amps
limits
demonstration
p_f
approximates
chap09soln.ipynb
exercise
goal
explore
2nd
cubicsignal
lti
acoustics
characterization
chap10.ipynb
http://tinyurl.com/thinkdsp10
amplifier
circuit
louder
room
system[my
http://en.wikipedia.org/wiki/lti_system_theory
inputs
linearity
outputs
y_1
x_2
x_1
y_2
scalars
invariance
state
shift
physical
inductors
resistors
capacitors
circuits
models
springs
masses
force
dashpots
displacement
velocity
water
solids
http://en.wikipedia.org/wiki/linear_differential_equation
impulse
kick
response
t=0
ones
tests
simultaneous
smoother
acoustic
balloon
gun
gunshot
silence
multiplier
transfer
transfers
audible
narrow
ceilings
firing
floors
head
responses
keys
impulses
t=1
scaled
multiplicative
salute
gunshots
guns
shots
individual
garage
horn
h
f[1]g[1
f[0]g[2
summary
encodes
equivalence
descriptions
statement
proof
ct
pieces
g[k
f[n
idft(f)[n
∑_k
f[k
∑_m
commutative
g[m
e_k
exp(2
eigenvector
k.
hand
qed
chap10soln.ipynb
circular
wrap
library
resource
centralized
auralization
acoustical
modulation
chap11.ipynb
http://tinyurl.com/thinkdsp11
beep
beeps
loudness
demodulation
transmitter
carrier
suitable
typical
united
500–1600
https://en.wikipedia.org/wiki/am_broadcasting
receiving
broadcast
plus
issue
analog
spacing
adc
converter
cd
dvd
bits
distinct
depth
https://en.wikipedia.org/wiki/digital_audio
course
rates
fidelity
select
drum
solo
train
fewer
leftover
contributions
include
guitar
bass
interpolation
wall
brick
sinc
https://en.wikipedia.org/wiki/sinc_function
sinc(x
sinπ
x.
curves
gap
resampling
bandwidth
shannon
https://en.wikipedia.org/wiki/nyquist-shannon_sampling_theorem
continuous
f/2
chap11soln.ipynb
monty
chris
montgomery
action
https://www.youtube.com/watch?v=ciq9ixsuzum
anti
----------------------------------------------------------------linkcolor
black
bottom
1em
p
pmargin
top
margin
imgborder
0px
alt =" previous "] back
png
"]
alt ="
alt =" next "] next
think dsp
allen b
downey
june 1
2022
===================
exercise
exerciseexercise
chapter
empty
3
version
green tea press
needham
massachusetts
copyright 2014 allen b
9 washburn ave
02492
granted
copy
modify
distribute
document
permission
terms
creative commons
attribution
sharealike 4
noncommercial
0 international license
available
http :// creativecommons
0 />.
4
licenses
org
sa
nc
book
source
http :// think
com >.
dsp
preface
useful
one
signal processing
favorite topics
engineering
science
many areas
understand
many things
provides insight
fundamental ideas
see
things
hear
especially
world
studied electrical
mechanical engineering
unless
learn
probably
chance
problem
books
present
use
classes
mathematical abstractions like
material bottom
starting
phasors
theoretical
tend
applications
little apparent relevance
premise
program
know
fun
skill
important
based approach
programming
end
analyze
ideas right away
first chapter
signals
sound recordings
generate new sounds
chapter introduces
application
new technique
apply
step
real signals
works
technique first
agree
practical
approach
hope
§
examples
python
supporting code
know core python
least using objects
familiar
object
oriented features
defining
start
might want
already familiar
think python
introduction
people
never programmed
mark
better
might
learning python
lutz
programming experience
scipy extensively
use numpy
already
functions
great
also explain
data structures
assume
reader knows basic mathematics
including complex
concepts
numbers
need much calculus
integration
differentiation
explain
linear algebra
go along
code
§ using
sound samples used
com
https :// github
allendowney
thinkdsp >.
git
allows
files
keep track
control system
collection
project
make
control
called
“ repository ”.
hosting service
provides
github
storage
git repositories
convenient web interface
repository
repository provides several ways
github homepage
work
create
pressing
fork button
forking
github account
create one
need
write
working
repo
means
clone
computer
fork
could clone
changes back
able
download
use git
want
button
zip file using
lower
right corner
github page
written
python 3
python 2
translation
book using anaconda
developed
continuum analytics
includes
free python distribution
lots
run
).
packages
default
level
install
found anaconda easy
user
system
installation
need administrative
supports
privileges
https :// www
download anaconda
distribution />.
anaconda
use anaconda
following
basic numerical computation
http :// www
org />;
numpy
scientific computation
scipy
matplotlib
http :// matplotlib
org />.
visualization
commonly used packages
although
included
hard
python installations
trouble installing
environments
python distributions
recommend using anaconda
include
also use jupyter
exercises use python scripts
notebooks
read
used jupyter
org >.
http :// jupyter
jupyter
jupyter notebooks
three ways
run jupyter
installed anaconda
check
server
probably got jupyter
command line
like
anaconda like
installed
launch
default web browser
new tab
open browser window
binder
virtual machine
service
runs jupyter
http :// mybinder
link
follow
thinkdsp >,
jupyter home page
get
supporting data
scripts
changes
temporary
along
leave
idle
disappear
hour
view notebooks
nbviewer
refer
notebooks later
provide links
static view
results
listen
links
interactive widgets
good luck
§ contributor list
suggestion
please send email
correction
change based
contributor list
feedback
add
ask
omitted ).
contributors
least part
sentence
easy
search
makes
page
error appears
fine
section numbers
thanks
started writing
thoughts
benefited
conversations
google
boulos harb
formerly
aurelio ramos
harmonix music systems
fall 2013 semester
nathan lintz
ian daniher
helped
worked
independent study project
first draft
reddit
anonymous user ramjetsoundwave
dsp forum
fix
brownian noise
implementation
andodli found
typo
spring 2015
pleasure
teaching
material
siddhartan govindasamy
miranda
prof
oscar mur
corrections
made many suggestions
silas gyger corrected
arithmetic error
giuseppe masetti sent
helpful suggestions
number
eric peters sent many helpful suggestions
special thanks
freesound
many
freesound users
sound samples
uploaded
sounds
wave files
github repository
using
original file
sources
find
names
real names
unfortunately
thank
user names
samples
iluppai
contributed
used
thirsk
kleeb
themusicalnomad
docquesting
landup
zippi1
wcfl10
bcjordan
jcveliz
rockwehrmann
marcgascon7
varies
time
quantity
signal represents
pretty abstract
definition
let
concrete example
sound signal represents
variation
sound
air pressure
variations
device
generates
microphone
measures
electrical signal
speaker
represents sound
produces sound
takes
called transducers
microphones
speakers
another
one form
convert
transduce
includes processes
focus
analyzing signals
transforming
synthesizing
methods apply
sound signals
electronic signals
mechanical vibration
domains
also apply
space rather
vary
hiking trail
elevation along
one dimension
signal
image
think
dimensional space
movie
two
dimensional sound
simple one
chap01
ipynb
ref >).
see section
also view
thinkdsp01 >.
http :// tinyurl
§ periodic signals
recording
bell
segment
periodic signals
repeat
example
period
record
generates sound
vibrates
strike
looks like
plot
transduced signal
ref >.
figure
sinusoid
signal resembles
trigonometric sine function
shape
periodic
chose
duration
cycles
also known
show three full repetitions
2
3 ms
cycle
frequency
inverse
per second
cycles per second
units
hertz
strictly speaking
abbreviated “ hz ”.
dimensionless number
“ per second ”).
really
slightly lower
439 hz
440
hz
orchestral music
standard tuning pitch
musical name
a4
specifically
note
numerical suffix
“ scientific pitch notation ”,
octave
indicates
middle c
a5
one octave higher
wiki
http :// en
scientific_pitch_notation >.
wikipedia
violin
tines
vibration
tuning fork generates
simple harmonic motion
musical instruments
form
produce periodic signals
shows
sinusoidal
ref
violin playing
3rd
string quintet
boccherini
5
e
movement
complex
periodic signal
musical instruments produce waveforms
waveform
waveform determines
musical timbre
perception
quality
warm
people usually perceive complex waveforms
rich
interesting
sinusoids
§ spectral decomposition
violin recording
spectrum
spectral decomposition
important topic
sum
expressed
idea
different frequencies
important mathematical idea
discrete
dft
fourier transform
produces
set
produce
fast
important algorithm
efficient way
fft
compute
axis
x
range
frequencies
axis shows
strength
amplitude
frequency component
lowest frequency component
fundamental
fundamental frequency
near 440 hz
“ flat ”).
actually
little lower
largest amplitude
also
dominant frequency
determined
normally
perceived pitch
dominant
even
spikes
frequencies 880
1320
1760
integer multiples
2200
components
called harmonics
musically harmonious
880
doubling
perfect fifth
approximately e6
perfect fifth ”, see
musical intervals like
interval_
music )>.
https :// en
a6
two octaves
major third
approximately c ♯ 7
major
notes
harmonics make
chord
approximate
western music
equal temperament
adjusted
equal_temperament >).
reconstruct
given
amplitudes
harmonics
adding
next
§ signals
contains classes
python module called thinkdsp
wrote
py
spectrums
“ spectrum ”
often written “ spectra ”,
plural
prefer
“ spectra ”,
use standard english plurals
choice
strange .].
represent signals
thinkdsp provides
class called
several signal types
parent class
cosine
represents
sine
including sinusoid
create sine
thinkdsp provides functions
cosine signals
unspecified
freq
amp
1
0
defined
play back
radians
offset
phase offset
signal starts
determines
sin 0
0 starts
sine signal
starts
sinπ
pi
method
operator
sumsignal
result
python representation
basically
mathematical
values
function
infinity
negative infinity
much
evaluate
sequence
ys
context
“ evaluate ” means taking
points
computing
ts
corresponding values
ys using numpy arrays
encapsulate
represent ts
wave
object called
wave represents
signal evaluated
frame
point
term borrowed
video ).
movies
measurement
“ sample ”
although “ frame ”
sample
sometimes
used interchangeably
returns
new
signal provides
wave object
length
seconds
framerate
start time
integer
frames per second
11
several framerates commonly used
025 frames per second
mp3
including waveform audio file
audio file formats
wav
example evaluates
025 ).
513 equally
half
513
spaced frames
frames
timestep
11025 seconds
91 μs
uses pyplot
wave provides
plot method
wave like
pyplot
part
mixture
two sinusoid signals
5 seconds
220 periods
zoom
solid block
color
small number
would look like
copies
periods
use segment
new wave
property
example copies
mix
first three periods
looks like figure
plot segment
signal contains two frequency components
less complicated
tuning fork
complicated
writing waves
§ reading
reads
file
writes
wav file
wave provides write
plays wav
media player
robust
use aplay
simple
unix systems
many linux distributions
thinkdsp also provides
runs
subprocess
provide
uses aplay
name
another player
§ spectrums
spectrum provides plot
spectrum provides three methods
pass filter
low
applies
given cutoff frequency
attenuated
factor
reduced
magnitude
high
cutoff
attenuates components
band
two cutoffs
99 %:
example attenuates
600
frequency sounds
low pass filter removes bright
darker
result sounds muffled
play
spectrum back
plays
play method writes
use jupyter notebooks
audio widget
§ wave objects
relationships among
thinkdsp
nothing
thin wrappers around functions
primary classes
relationships
shown
vice versa
numpy array
wave object contains three attributes
contains
array
evaluated
times
sampled
samples per unit
usually seconds
unit
days
wave also provides three read
properties
modify ts
properties change accordingly
ys directly
access
first line scales
making
second line shifts
louder
start 1 second later
wave provides methods
perform many common operations
two transformations could
others
methods
documentation
http :// greenteapress
html >.
§ signal objects
provides functions common
kinds
child classes inherit
evaluates
provide evaluate
given sequence
child class
parameters
arbitrary
usually chosen
0 corresponds
maximum input
maximum output
reasons
func
python function used
particular point
cos
np
sin
usually either np
yielding
cosine signal
like many init methods
tucks
parameters away
future use
n
sample times
invokes evaluate
provided
function one step
unwind
self
element
product
cycles since
multiplying
stores 2 π
pi2
constant
pi2 converts
phase
“ cycles since
start time ” expressed
2 π radians
0 ].
signal left
shifting
effect
right
value
ranges
amp yields
math notation
written like
ϕ_0
2 π f
f
may seem like
lot
evaluate one simple expression
dealing
framework
§ exercises
exercises
begin
section
instructions
solutions
chap01soln
load chap01
notebook
http :// freesound
go
sound sample
well
includes music
defined pitch
speech
second segment
pitch
roughly half
select
selected
timbre
connection
harmonic structure
filter
sound relate
made
creating sinsignal
compound signal
cossignal
synthesize
objects
add frequency
happens
multiples
function called stretch
stretch
modifying ts
speeds
slows
hint
take two lines
present several new waveforms
look
also introduce one
important phenomena
digital
little
aliasing
spectrum class works
chap02
thinkdsp02 >.
§ triangle waves
one frequency component
sinusoid contains
one peak
complicated waveforms
many peaks
yield dfts
waveforms
relationship
investigate
200 hz
triangle signal
triangle waveform
straight
line
frequency 200 hz
generate
trianglesignal
use thinkdsp
triangle wave
trianglesignal inherits
arguments
difference
saw
many ways
details
evaluate works
fraction
modf splits
stored
integer part
frac
ignored
variable name
convention
underscore
value .”].
“
intend
ramps
subtracting 0
5 yields values
zags
absolute value yields
zig
taking
centered
unbias shifts
normalize scales
given amplitude
ref >:
generates figure
right cuts
vertical scales
show
clearly
shows two views
view
scaled
highest peak
expected
harmonic frequencies
additional peaks
200
one surprise
even multiples
peaks
400
etc
800
odd multiples
1000
1400
another feature
amplitude drops
proportion
frequency ratio
frequency squared
first two harmonics
600 hz
next two
approximately 9
ratio
amplitude ratio
7
1000 hz
9
approximately 1
§ square waves
square signal
100 hz
thinkdsp also provides squaresignal
class definition
squaresignal inherits
like trianglesignal
evaluate method
similar
fractional part
unbias shifts frac
sign maps
negative values
square
positive values
jumps
shows three periods
frequency 100 hz
square wave contains
odd harmonics
700 hz
300
500
harmonics drops
slowly
squared ).
chapter give
harmonic structures
explore
§ aliasing
1100 hz sampled
000 frames per second
10
confession
previous section
carefully
avoid showing
something confusing
get confused
1100 hz
5500
9900 hz
7700
3300
3300 hz
1100
5500 hz
4500
third peak
look closely
7700 hz
fourth peak
2300
9900
going
peak
discrete points
happened
lose information
low frequency components
samples per period
5000 hz
turns
two samples per period
enough
higher
barely
generate cosine signals
000 frames
different
identical
plotted
samples using vertical lines
thin gray lines
easier
compare
two waves
clear
even though
waves
5500 hz signal
4500 hz signal
indistinguishable
7700 hz signal
reason
2300 hz
called aliasing
high frequency
low frequency signal
appears
highest frequency
measure
sampling rate
folded
sometimes called
threshold
back
sometimes also called
nyquist frequency
“ folding frequency ”.
nyquist_frequency >.
aliased frequency goes
folding pattern continues
5th harmonic
1100 hz triangle wave
zero
12
2100 hz
would appear
gets folded
fact
0 hz
small peak
ref >,
4300 hz
§ computing
seen
wave method several times
leaving
later ):
parameter self
frame rate
provides functions related
numpy module
fft ),
fast fourier transform
efficient
dft ).
algorithm
discrete fourier transform
computes
“ real
stands
uses rfft
fft ”,
later
wave contains real values
handle complex signals
full fft
call hs
rfft
call fs
rfftfreq
contains frequencies corresponding
hs
two ways
consider
complex numbers
imaginary
real part
complex number
often written x
iy
imaginary unit
√(- 1 ).
cartesian coordinates
complex exponential
also called
angle
ϕ
polar
“ argument ”.
coordinates
hs corresponds
corresponding
proportional
component
amps
spectrum class provides two read
angles
return numpy arrays representing
magnitudes
usually plot amps versus fs
also useful
plot angles versus fs
real
tempting
encourage
parts
almost never need
vector
phase offsets
encoded
happen
hs directly
elements
first line multiples
doubles
second line
sets
cutoff frequency
frequency exceeds
operations
perform
spectrum also provides methods
better idea
explained
spectrum classes work
take
fourier transform works
chapters
chap02soln
use jupyter
load chap02
try
sawtooth signal
linearly
repeats
drops
sawtooth_wave
sawtoothsignal
extends signal
harmonic
sawtooth wave
square waves
structure compare
triangle
10000 frames per second
aliased
aliased harmonics
spectrum object
print
fs
first
mean
frequency 0
experiment
frequency 440
01 seconds
duration 0
print spectrum
set spectrum
100
modified spectrum
operation
modifies
parameter
dividing
corresponding frequency
undefined
since division
function using
test
spectrum using
sawtooth
sawtooth waves drop
like 1
triangle wave drop
drop
could approach
could
construct
could start
non
far
repeat forever
also means
contain
change
consider non
whose frequency components
words
pretty much
common way
chapter also presents spectrograms
visualize
chap03
thinkdsp03 >.
§ linear chirp
middle
chirp waveform near
beginning
variable
chirp
signal called chirp
sweeps linearly
220
sweeps
880 hz
a3
wave near
shows segments
increasing
implemented
spaced
keep
function simple
equally
use np
linspace
n values
adjacent elements
diff computes
interval
returning
equally spaced
dts
next step
phase changes
increases linearly
δ
short time interval
δϕ
since freqs contains f
time intervals
since dphis contains
total phase
almost
cumsum computes
cumulative sum
insert
ith element contains
dphis
total
ith interval
finally
remember
radians ).
limit
know calculus
might notice
gets small
dϕ
dt
dt yields
derivative
conversely
used cumsum
integral
approximating integration
§ exponential chirp
rises quickly
span
chirp spans two octaves
takes 2
first octave
second
twice
long
pitch depends
logarithm
two notes
depends
perceived difference
“ interval ”
musical term
two pitches
one octave
pitches
also one octave
bigger
linear
frequency increases linearly
perceived pitch increases logarithmically
increase linearly
increase exponentially
exponential chirp
makes one
evaluate uses
instead
creates
series
logspace
whose logarithms
increase
exponentially
everything else
exponential chirps
§ spectrum
second one
octave chirp
think happens
constructs
440 hz
every frequency
sauron
eye
little like
sauron >).
approximately flat
signal spends equal time
based
observation
guess
exponential chirp looks like
spectrum gives hints
structure
obscures
cannot tell
spectrum whether
looking
frequency went
§ spectrogram
spectrogram
break
recover
segments
time fourier transform
stft ).
short
stft
common
several ways
shows time
spectrogram shows
column
represent amplitude
grayscale
short segment
using color
spectrogram object
512
power
axis shows time
cut
1 seconds
axis shows frequency
5 hz
full range goes
5512
top part
spectrogram shows clearly
similarly
exponential curve
however
blurred across 2 – 3
notice
limited resolution
cells
blurring reflects
gabor limit
time resolution
corresponds
width
025
since
512 frames
046 seconds
frequency range
frequency resolution
height
get 256 frequency components
21
6 hz
spectrum contains
generally
segment length
maximum frequency
2 components
r
see rapid
would like time resolution
ideally
small
would like frequency resolution
see small changes
gets bigger
resolution
one gets smaller
double
cut frequency
good ),
double time resolution
even increasing
help
bad ).
frequencies increases
tradeoff
kind
frequency analysis
limitation
§ leakage
left ),
periodic segment
middle ),
windowed non
right ).
order
explain windowing
meant
leakage
address
dft ),
treats waves
assumes
operates
finite segment
complete period
infinite signal
practice
assumption
creates problems
often false
one common problem
discontinuity
dft assumes
segment back
implicitly connects
loop
connect smoothly
discontinuity creates additional frequency components
integer multiple
segment connects smoothly
dft behaves well
left
single peak
multiple
bad things
25
30
ends
240
640 hz
additional components spread
spread
energy
called spectral leakage
fundamental frequency leaks
leakage happens
using dft
becomes discontinuous
treat
§ windowing
middle ), product
top ), hamming window
window
bottom ).
reduce leakage
smoothing
one way
windowing
transform
function designed
“ window ”
something
pass
“ hamming window ”, one
perfect
common window functions
window function
optimal
different applications
hamming
purpose window
good
original signal
close
unchanged
window tapers
windowed
reduced leakage substantially
completely
code looks like
wave provides window
hamming window
numpy provides hamming
given length
numpy provides functions
blackman
including bartlett
hanning
kaiser
asks
windows
§ implementing spectrograms
overlapping hamming windows
understand windowing
computes spectrograms
wave method
longest function
handle
handle anything
slice indices
select segments
j
since step
segments overlap
overlapping windows look
timestamp
dictionary
maps
slice
inside
nominal time
midpoint
advance
continue
go past
method constructs
stores
attributes
spectrogram provides plot
frequency along
pseudocolor plot
time along
spectrograms
chap03soln
also available
leakage example
try replacing
windows provided
routines
doc
html
http :// docs
reference
extends chirp
class called sawtoothchirp
sawtooth waveform
overrides evaluate
decreases
increases
combine
evaluate functions
sketch
draw
visually apparent
listen carefully
3000 hz
2500
sawtooth chirp
duration 1
framerate 20 khz
look like
got
slides
musical terminology
“ glissando ”
glissando
rhapsody
george gershwin
one suggestion
blue starts
famous clarinet glissando
rhapblue11924 >.
http :// archive
extending
trombone
trombone player
blowing continuously
slide
slide extends
inversely
resulting pitch
tube gets longer
player moves
assuming
constant speed
frequency vary
class called trombonegliss
provides evaluate
simulates
c3
f3
262 hz
349 hz
resulting wave
trombone glissando
vowel sounds
identify different vowels
noise
english
unwanted
unpleasant sound
“ noise ” means
two different senses
unwanted signal
signal would consider
two signals interfere
contains components
“ noise ” also refers
many frequencies
lacks
previous chapters
second kind
chap04
thinkdsp04 >.
§ uncorrelated noise
uncorrelated uniform noise
simplest way
understand noise
simplest kind
uu noise ).
uniform
“ uniform ” means
signal contains random values
distribution
every value
equally likely
“ uncorrelated ” means
independent
information
knowing one value provides
class
represents uu noise
uncorrelateduniformnoise inherits
inherits
usual
evaluate function takes ts
uses
random
generates values
uniform distribution
following example generates uu noise
025 samples per second
sounds like
tune
static
radio
channels
waveform looks like
looks pretty random
power spectrum
plots power instead
except
switching
conventional
spectrum looks pretty random
least three
word “ random ”.
precise
noise signal
might like
random signal
possible values
probabilities
uniform noise signal
probability
alternative
negative
gaussian noise
positive infinity
values near 0
likely
according
gaussian
“ bell ” curve
correlation
signal independent
uu noise
dependencies
previous value
random “ step ”.
expect
stay
stay low
uu
drawn
average power
pink noise
inversely related
frequency f
distribution whose mean
§ integrated spectrum
integrated spectrum
cumulative power
spectrum provides
integratedspectrum
numpy array containing power
powers
last element normalizes
integrated
integratedspectrum provides
like spectrum
integrated spectrum like
straight line
average
equal power
called white noise
light
analogy
equal mixture
visible frequencies
white
§ brownian noise
depend
uncorrelated
brownian motion
called “ brownian ”
fluid moves apparently
particle suspended
due
fluid
often
unseen interactions
mathematical model
described using
random walk
steps
distance
path
characterized
random distribution
particle moves
dimensional random walk
random amount
time step
location
particle
previous steps
generate brownian noise
way
observation suggests
generate uncorrelated random steps
implements
evaluate uses np
uncorrelated signal
cumulative
cumsum
escape
shift
use unbias
desired maximum amplitude
normalize
plots
browniannoise object
wanders
clear correlation
tends
successive values
linear scale
log
log scale
look like much
lowest
nearly
higher frequency components
visible
plot power
noisy
roughly linear
uses scipy
least squares fit
first component
discards
log 0
component corresponds
linregress
stats
estimated slope
coefficient
2 ),
intercept
determination
purposes
standard error
slope
ref >),
k
log p
2 log f
exponentiating
sides yields
still
relevant
characteristic
also called red noise
white noise
combine visible light
called “ white ”.
power proportional
frequency end
would
red
also sometimes called “ brown noise ”,
confusing
§ pink noise
β
red noise
nothing special
exponent 2
synthesize noise
exponent
called pink noise
generate pink noise
simplest
generate white noise
desired exponent
pink noise signal
desired amplitude
pinknoise provides
beta
random noise
interface
types
irrelevant
samples per second
pink
white noise wave
converts
normalizes
unbiases
filtered spectrum back
divides
since power
operation divides
treats
avoid dividing
special case
partly
element represents
bias
0 anyway
resulting waveform
suggests
looks
least visually
come back
next chapter
random ”.
“ correlation ”
apparent
§ gaussian noise
normal probability plot
imaginary parts
uncorrelated uniform
started
showed
“ white noise ”,
people talk
always
mean uncorrelated
mean uu noise
ug
ug noise
normal returns
standard deviation
case
mean 0
gaussian distribution
theory
99
also white
interesting property
precisely
also ug noise
uncorrelated gaussian values
claim
graphical
“ normal probability plot ”,
test whether
normalprobabilityplot
thinkstats2
chapter 5
normal probability plots
think stats
http :// thinkstats2
gray lines
linear model fit
data
dark lines show
normal probability plot indicates
data come
lines
random variation
extremes
least approximately
central limit theorem
uncorrelated noise
approximately gaussian
finite mean
large
chap04soln
natural
soft murmur ”
web site
including rain
wind
noise sources
http :// asoftmurmur
list
/>
recordings
power spectrum look like white noise
spectrum vary
frequencies changes
long run
equal
estimate
term average power
long signal
average across
bartlett
s_method >.
implement bartlett
noise wave
coindesk
daily
bitcoin
price
csv file
bitcoin prices
resemble white
geiger counter
detects radiation
outputs
ionizing particle strikes
surge
detector
modeled
current
total output
uncorrelated poisson
poisson distribution
random quantity
particles detected
class called uncorrelatedpoissonnoise
poisson
generate random values
lam
particles
average number
specify lam
attribute amp
001
10 khz
“ clicks ” per second
low values
sound like
like 0
sound like white noise
higher values
looks like white noise
see whether
generating pink noise
conceptually simple
computationally expensive
efficient alternatives
voss
mccartney algorithm
research
implement
confirm
desired relationship
autocorrelation
characterized white noise
“ uncorrelated ”,
previous chapter
brownian
“ correlated ”,
value depends
preceding
define
autocorrelation function
useful tool
signal analysis
chap05
thinkdsp05 >.
§ correlation
general
variables means
quantify correlation
usually denoted
pearson product
moment correlation coefficient
contain n values
two variables
ρ
∑ _i
μ_y )/ n σ_x σ_y
y_i
μ_x
x_i
μ_y
standard deviations
σ_x
σ_y
including
pearson
positive
say
one variable
ρ indicates
perfectly correlated
variables
know one
perfect prediction
probably weak
near zero
tell
say “ probably weak ”
also possible
captured
nonlinear relationship
often important
nonlinear relationships
statistics
less often relevant
compute correlations
pair
corrcoef takes
includes correlations
correlation matrix
python provides several ways
two sine waves
differ
1 radian
54
constructs sine waves
different phase offsets
instantiate two waves
different offsets
waves look like
one wave
usually high
correlated
divide
option ddof
corrcoef
0 indicates
equation
rather
wave1
first element
always 1
last element
wave2
interested
diagonal elements contain
value 0
moderate
phase offset increases
correlation decreases
180 degrees
yields correlation
offset differs
360 degrees
come full circle
curve
sine wave
simple interface
§ serial correlation
signals often represent measurements
quantities
represent
correspond
current ),
voltage
measurements
perceive
measurements like
almost always
serial correlation
previous ).
compute serial correlation
original
shifted version
lag
integer number
places
previous
noise signals
expect uu noise
generated
mention
name ):
got 0
006
ran
small serial correlation
different value
might get
comparably small
brownian noise signal
strong serial
random “ step ”,
999
sure enough
greater
sense
since pink noise
intermediate correlation
might expect
851
parameter β
almost 1
§ autocorrelation
computed
shifted
easily compute serial correlations
different lags
autocorrelation functions
corresponding correlation
looping
autocorr takes
sequences
lags
integers
corrs
serial correlations
shows autocorrelation functions
three values
less correlated
autocorrelation function drops
zero quickly
larger values
7 serial
stronger
strong even
phenomenon
long lags
range dependence
many preceding values
signal depends
interesting mathematical
limited applications
vocal chirp
downloaded
someone singing
book includes
wav >.
28042__bcjordan__voicedownbew
jupyter notebook
harmonics show
300 hz
chirp starts near 500 hz
roughly
e4
c5
estimate pitch
could use
2 seconds
segment starts
lasts 0
clear peak
identify
near 400 hz
pitch precisely
44100 hz
441 samples
estimated pitch might
50 hz
musical
350 hz
450 hz
5 semitones
big difference
longer segment
could get better frequency resolution
changing
would also get “ motion
peak would spread
end pitch
blur ”;
precisely using autocorrelation
spike
lag equals
two segments
0023 seconds
one starting 0
plot two segments
one segment starts
starts 0
result suggests
near 0
435 hz
estimated
automate
error
trial
process
segment starting
first peak occurs
101
period like
estimated fundamental frequency
437 hz
precision
computation
frequencies 432
lags 100
102
441 hz
less
10 hz
frequency precision using autocorrelation
compared
100 hz using
musical terms
semitone ).
expected error
third
30 cents
dot product
correlation coefficient
define serial correlation
used ρ
consistent
definitions
little different
often working
unbiased signals
standard
normalized signals
deviation
ρ simplifies
n ∑ _i x_i y_i
simplify even
∑ _i x_i y_i
“ standardized ”,
useful properties
generally fall
vectors
might recognize
x ·
formula
dot_product >.
dot product indicates
degree
normalized
cosθ
explains
θ
cosine curve
§ using numpy
correlate
autocorrelation function computed
numpy provides
two functions
option mode tells correlate
',
wave array
symmetric
negative lag
two signals
positive lag
autocorr
second half
compare figure
correlations computed
get smaller
lags increase
unstandardized definition
lag gets bigger
overlap
two signals gets smaller
correlations decreases
correct
lengths
standardize
adjustments
results computed
still differ
curious
2 %.
standardizes
correlations independently
standardized
importantly
fundamental period
ways
chap05soln
lets
compute autocorrelations
interaction
different start times
example code
use autocorrelation
function called
recorded sound
track
pitch estimates
try superimposing
historical price
bitcoins
price changes
autocorrelation function drop
quickly
periodic behavior
evidence
explores autocorrelation
pitch perception
phenomenon called
missing fundamental
try selecting
running
different segment
vi hart
noises
excellent video called “
mathematics
pitch )”;
demonstrates
missing fundamental phenomenon
perception works
know ).
watch
least
v
youtube
i_0dxxneaq0 >.
discrete cosine transform
topic
discrete cosine
related formats
dct ),
similar formats
jpeg
images
compressing music
mpeg
formats
family
video
dct
spectral analysis
explain dft
dct works
synthesis problem
synthesis problem using numpy arrays
rewrite
performance
also provides insight
move
analysis problem
solution
slow
principles
already know linear algebra
efficient algorithm
chap06
thinkdsp06 >.
§ synthesis
give
suppose
using objects
thinkdsp module
simple way
called synthesis
cossignal objects
sumsignal represents
frequency pair
frequency components
evaluate computes
function like
example makes
sharp g2 ).
three harmonics
renders
puts
one second
conceptually
synthesis
pretty simple
inverse problem
analysis
help much
arrays
another way
write synthesize
thing
function looks
outer product
outer computes
one row
one column
2 π
multiply args
apply cos
ts run
columns
column contains
particular frequency
dot multiplies
row
wise
adds
products
matrix
weighted sum
algebra
nth row
t_n
0 seconds
column corresponds
kth column
f_k
400 hz
labeled
letters
t_n ].
one element
labeled e
nth element
6
25 b
1 c
05
likewise
four frequency components
multiplied
corresponding amplitudes
wanted
exactly
versions
synthesize produce
biggest difference
expect due
ys1
1e
point errors
ys2
floating
13
linear algebra makes
writing
smaller
faster
matrices
provides concise notation
could write synthesize like
⊗ f
⊗
two vectors
symbol
§ analysis
solve
ready
given set
cosines
given ys
recover amps
first step
⊗ f ).
numpy provides linalg
linear system
build
first two lines use ts
linalg
solve computes amps
hitch
equations
rows
columns ).
unknowns
4 frequencies
025 times
4 elements
unlikely
actually generated
4 frequency components
4 values
first 4 samples
simplicity
run analyze1 like
amps2
algorithm works
solving
equations takes time proportional
§ orthogonal matrices
inverting matrices
solve linear systems
^- 1
^- 1m
identity matrix
diagonal elements
value 1
0 everywhere else
sides
multiply
yields
^- 1y
replace
right side
^- 1 efficiently
implies
using np
dot ).
simple matrix multiplication
takes time proportional
special cases
inverting
particular
orthogonal
transpose
transposing
time operation
actually move
“ view ”
accessed
tm
check whether
synthesize2
matrix looks like
good idea
025 rows
previous example
smaller example
4 points
equally spaced sample times
time unit
1 millisecond
1 time unit
minute
arbitrary choice
computation anyway
n samples per time unit
nyquist
2000 hz
equally spaced frequencies
approximation
707
might recognize 0
√( 2 )/ 2
cosπ
also might notice
j ).
equals
sadly
iv
§ dct
fs carefully
choose ts
dct ).
several versions
one simple option
half unit
shift ts
called dct
“ iv ”
roman numeral
eight versions
fourth
indicating
updated version
test1
previous version
added 0
two changes
simplifies
canceled
expression
displayed
point representation
small negative number
2i
good enough
efficient version
analyze2
combining test2
compute amps2
biggest
16
§ inverse dct
analyze2 divides
insight
inverse dct
solves
applying
testing
get back
dct class
encapsulates
spectrum class encapsulates
dct object
invoke
dct corresponds
negated cosine
negative value
equivalently
cosine shifted
ii
uses dct
common type
fftpack
initialize
performs
dct provides
idct
2n
starter code
following exercises
chap06starter
chap06soln
analyze1 takes time proportional
analyze2 takes time proportional
input sizes
true
“ magic command ”
plot run time versus input size
analyze1
slope 3
slope 2
also might want
compression
major applications
simplest form
based compression
works like
identify frequency components
inaudible
store
remove
remain
load
eliminate
many components
music
perceptible
method practical
sparse array
numpy provides several implementations
sparse arrays
sparse
explores
choose another segment
experiments
phase structure
general relationships
cosine function
complex exponential function
explaining complex exponentials
progression
inverse dft
equivalent
multiplication using numpy arrays
use linear algebra
chap07
thinkdsp07 >.
§ complex exponentials
generalization
interesting moves
one type
factorial
natural definition
might wonder
certain inclination
integer like 3
might look
would work
leonhard euler found one
1730
gamma function
gamma_function >).
useful generalizations
applied
euler also found one
exponentiation
repeated multiplication
ϕ · ϕ · ϕ
integer exponents
power series
...
definition works
real numbers
imaginary numbers
extension
iϕ
pure imaginary number
rearranging terms
sinϕ
cosϕ
derivation
s_formula >.
euler
magnitude 1
complex plane
circle
positive x
argument
indicates amplitude
real number
indicates angle
unit complex number
exp
python uses j
number ending
considered imaginary
1j
complex128
point numbers
two 64
bit floating
represented
0707
997j
imag
attributes real
function abs
built
absolute
example confirms
angle ϕ radians
§ complex signals
function describes
complex exponential signal
complex sinusoid
cos 2 π f
sin 2 π f
signal might start
complexsinusoid
complexsinusoid inherits
almost identical
uses np
exp instead
1 cycle per second
unspecified units ),
4 places equally spaced
resulting samples
1 second
create compound signals
real sinusoids
complex sinusoids
complex version
brings us
complex component
create complexsinusoid objects
simplest solution
synthesize1
replaced
ref >;
complex signal
lowest level
interpret
intuition
represent quantities
sound signal represents changes
world yields complex numbers
satisfying answer
best
offer
two unsatisfying
question
answers
mathematical abstraction
correspond directly
real world
anything
contains two signals
split
second point
imaginary part
sines
waveforms look different
proportions
ears
phase offsets ).
also express
matrix multiplication
sequence containing
ts contains
args contains
fs running
ts running
refer back
across
whose elements correspond
several complex sinusoids
particular time
could also
complex amplitude
either
second interpretation
expi ϕ_0 · expi 2 π f
expi
ϕ_0 multiplies
phase offset ϕ_0
two complex signals
since amps
phi
reals
phase offset phi radians
5 shifts
one quarter
also changes
different frequencies changes
offset applied
components line
general solution
synthesis problem –
handles complex amplitudes –
knowing
complex amplitudes
forming
synthesis matrix
possibly complex
analyze1 takes
real frequencies
continuing
recovers
solver
insure
need ys
slicing ys
approximately
small imaginary part due
§ efficient analysis
choosing fs
speed things
one small change
unitary
conjugate transpose
negating
unitary_matrix >.
numpy methods conj
4 components
^*
unitary like
within
tolerance
point error
extra factor
unitary except
found
faster version
appropriate values
correct within
arithmetic
§ dft
analyze2 would
chosen correctly
compute fs
takes ys
analyze3 computes something
almost done
conventional definition
one difference
version yields
within floating point error
conjugate
amps )) yields amps
idft
might change
could go back
presentation
problems
operations divide
√( n ).
inverse dft would
stuck
),
go back
slightly
yet
practical purposes
weird convention
matter
presented
^*.
analysis matrix
summation
n k
exp (- 2 π
∑ _n
)[ k
index
kth element
could evaluate
plugging k
mathematically
two parts
n n
second term
)[ k ].
period n
fast fourier
fft ).
aside
summation provides
diagram
review
therefore
similarity
quantifies
500 hz sawtooth signal sampled
spectrum class
“ real dft ”;
complex signals
real signal
“ full dft ”
code makes
frequency 500 hz
complex dft
hs contains
framerate 10 khz
amps contains
amplitudes correspond
body
right frequencies
thinks
n per time unit
arbitrary time units back
actual
left half
500 hz
harmonics dropping
past 5000 hz
surprise
right half
peaking
9500 hz
harmonics start growing
answer
framerate 10000 hz
folding frequency
4500 hz
6000 hz
4000 hz
symmetric around
additional information past
first half
evaluating
save time
chap07soln
additional examples
explanations
express
matrix multiplications
operations take time proportional
fast enough
many applications
takes time
n log n
key
lanczos lemma
danielson
e )[ n
)[ n
wave array containing
even elements
odd elements
lemma suggests
recursive algorithm
making recursive calls
compute dft
n using
base case
could wait
recursion
sufficiently small
could compute
precomputed matrix
possibly using
suggest
algorithm incrementally
truly recursive
step 2
use dft
recursive call
get step 3 working
implementations
replace step 2
recursive calls
might find np
tile useful
fast_fourier_transform >.
filtering
convolution
present one
ideas related
convolution theorem
simple example
chap08
thinkdsp08 >.
§ smoothing
facebook stock
daily closing price
day moving
tries
term variations
remove short
reveal long
term trends
would look noisy
plot daily changes
stock
smoothing operator might make
generally going
common smoothing algorithm
moving average
previous n values
may 17
december 8
facebook
2012
closing price
gray line
2015
raw data
darker line shows
day moving average
smoothing removes
see long
extreme changes
smoothing operations also apply
square wave
square wave drop
contains many high
plotting
shorter segment
11 elements
first 11 elements
zeros added
padded
prod
first 11
elementwise products
gray
smoothed signal
next element
next 11 elements
array named smoothed
rolled
gets shifted
darker line
ramp
leading edge
smoothed signal starts
first transition
levels
window reaches
transition
window crosses
transitions
less abrupt
corners less sharp
slightly muffled
sounds less buzzy
§ convolution
called convolution
common operation
simpler
convolve computes
mode flag valid indicates
compute values
stops
wave array overlap completely
edge
previous section actually computes cross
∑ _m
f ⋆ g )[ n
g
1 f
length n
⋆
cross
shift g
slightly different
f g )[ n
symbol represents convolution
negated
summation iterates
negative indices wrap around
g backward
array ).
convolution yield
careful
two reasons
definition comes
several applications
naturally
processing systems
especially analysis
basis
soon
coming
frequency domain
smoothing makes
square signal less abrupt
sound slightly muffled
original wave
smoothed wave
mode flag
input
ok
“ wrap around ”,
almost unchanged
higher harmonics
almost eliminated
two spectrums
big
0 except
low frequencies
near 4000 hz
ratio bounces around
smoothing window
stated mathematically
·( g
f g
convolve f
convolution theorem says
concisely
domain corresponds
multiplication
explains figure
convolve
padded contains
zeros
ratios
(( f g ))
(( f ))
(( g ))
convolution window
time domain
corresponding filter
wise multiplication
corresponding window
§ gaussian filter
gaussian windows
boxcar
moving average window
good one
dft drops
bounces around
bounces
steeply
called sidelobes
spectrum contains high
relatively
proportionally
scipy provides functions
gaussian window
compute many common convolution windows
including gaussian
std
gaussian distribution used
discrete approximation
“ bell curve ”.
figure also shows
boxcar window
rectangular railway car
gaussian smoothing
computations
previous sections
generated figure
ratio drops
stays low
none
sidelobes
better job
higher frequencies
cutting
gaussian curve
exp (- f
much faster
§ efficient convolution
combined
compute convolution
convolution theorem states
(( f
·( g ))
simple implementation
convolution takes time proportional
using fft
bitcoin data
example uses pandas
book ).
pandas
worry
dataframe
df
contains daily
closing prices
thing using fft
padding
1 bogus values
bogus values
agrees
12 digits
§ efficient autocorrelation
autocorrelation functions computed
fft_correlate
presented definitions
reversed
compute cross
autocorrelations
also use
correlations
autocorrelation facebook stock prices
mode ='
suggesting
function drops
signal resembled
compute autocorrelation using convolution
pad
trick
necessary
wraps
around
series data like
invalid
adding zeros
trimming
removes
direction
convolution reverse
cancel
reverse
flipud
calling
flips
length 2n
last n
rest
valid
roll
valid element
first n
precision ).
9 digits
large numbers
could normalize
correlation also works
strategy
auto
prepare
flipping
invalid parts
trim
nuisance
libraries like numpy provide functions
chap08soln
interactive widget
goes wrong
without increasing
claimed
discrete fourier transforms
approximately true
vary std
spectral leakage
dfts
addition
size
zero pad
better low
window acts
scale
different windows
different sizes
chapter picks
previous chapter left
filters
finite difference
approximates differentiation
approximates integration
sum operation
chap09
thinkdsp09 >.
§ finite differences
stock price
time domain corresponds
daily price changes
successive elements
opening
closing
low prices
save
prices
1 sample per day
time series
time series resembles brownian noise
visually
spectrum looks like
albeit
noisy one
daily price change using np
diff
daily changes resemble white noise
06
daily price change
1 ].
elements seems backward
convolution reverses
filters corresponding
differentiate operators
integration operator
scale ).
high pass filter
window corresponds
amplitude increases
sublinearly
next section
§ differentiation
numerical approximation
first derivative
approximates
simple filter
math
e_f
f e
dt e_f
f e_f
angle π
magnitude 2 π f
ref >, multiplying
multiplies
two effects
shifts
π
language
eigenfunctions
operators
differentiation operator
eigenfunction
corresponding eigenvalue 2 π
eigenfunction >.
another function
λ g
scalar
scalar λ
eigenvalue
eigenfunction g
given operator might
many eigenfunctions
corresponding eigenvalue
differentiate
complex scalar
slightly harder
differentiated components
process sounds familiar
ref >: compute
facebook time series
comparison
daily price changes computed
differentiation filter
compares
first 50 values
differences
amplifies
noisier
left ).
based derivative
connects
time series back
creates artifacts
boundaries
summarize
simple window
spectral
compute derivatives
solving differential equations
spectral_method >).
invariant
systems
§ integration
original time series
since integration
also corresponds
filter like
integration filter
nan
point value
special floating
number ”.
represents “
partially deal
converting
setting
integrated derivative along
integrated derivative
clobbered
0 component
surprising
differentiation loses
unknown
telling us
“ constant
integration ”,
confirms
§ cumulative sum
diff operator approximates differentiation
cumulative sum approximates integration
demonstrate
new wave object
parabolic wave
look familiar
parabolic signal
comparing
components drop
integration filters components
parabolic wave drop
graphically
inverse operation
diff operation
invert
highest frequencies
integration except
little faster
correct filter
actual ratios
filter corresponding
resulting ratio
denom
diff yields
convolution theorem applies
cumsum filter
limits
computed using cumsum
demonstration
convolution theorem works
§ integrating noise
generated brownian noise
domain
divided
p_f
log p_f
log k
similar spectrums
many stock prices
compute daily changes
diff operator
filter proportional
operation adds 2
differentiation ).
chap09soln
goal
apply diff
apply differentiate
integrate
apply integrate
integrating
apply integrate twice
mathematical form
resemble
2nd
cubicsignal
2nd derivative
second difference
result look like
diff twice
applying differentiate
spectrum twice
result look
2nd difference
framerate 1
lti systems
chapter presents
musical acoustics
important application
characterization
invariant systems
define soon ).
chap10
thinkdsp10 >.
abstract
representation
output
electronic amplifier
circuit
another example
musical performance
room
somewhat different sound
invariant system
follows
lti_system_theory >.]
two properties
put two inputs
linearity
input x_1 produces output y_1
another input x_2 produces
y_2
b x_2 produces
b y_2
y_1
x_1
b
scalars
time invariance
state
inputs x_1
x_2 differ
otherwise
y_2 differ
outputs y_1
many physical systems
resistors
capacitors
circuits
inductors
lti
components behave like
idealized
models
masses
contain springs
mechanical systems
assuming linear springs
force proportional
also lti
dashpots
displacement
velocity ).
including air
water
transmit sound
media
solids
described
linear differential equations
linear_differential_equation >).
result provides
input signal
lti system
complex sinusoid components
input component
corresponding output component
output components
algorithm sounds familiar
called spectral decomposition
“ decompose ”
spectral components
finding
characterize
kick
impulse
technically
“ kick ”
impulse response
single impulse
completely characterize
ones
equal magnitudes
confused
varies around
inputting
response
simultaneous tests
interfere
§ windows
system characterization works
element moving average
slightly smoother signal
usually
filter ahead
element moving average window
ref >):
approximate shape
imagine
measuring
filtered wave
example demonstrates two things
characterizes
§ acoustic response
acoustic response
open space
pop
balloon
gun
fire
gunshot puts
gunshot
fired
simulate
silence
26 seconds
encodes
amplitude multiplier
transfer
phase shift
system transfers
contains information
room would
gunshot waves
44
coincidentally
trimmed
violin wave
transfer function
output wave
substantially different
clearly audible
load chap10
find striking
narrow room
hard floors
firing range
ceilings
one thing
glossed
bothers anyone
one system
transformed
recorded
really computed
two transformations
properly simulate
different room
transfer function first
§ systems
scaled copy
black magic
thinking
alone
still makes
head hurt
suggested one way
amplitude 1
impulse response contains
responses
breaking
altogether
frequency domain corresponds
system response
keys
understanding
input wave
impulses
varying amplitude
input yields
scaled copies
copies add
firing one
gradually
big one
fire two
smaller one
amplitude 0
original impulse response
shifted copy
parameter shift
time shift
multiplicative factor
gun salute
surprisingly
sounds like two gunshots
first one louder
suppose instead
two guns
100 guns fired
rate
441 shots per second
loop computes
individual shots
car horn
garage
key insight
impulse responses
would sound like
shifted copies
h
example shown
summary
input encodes
transfer function yields
equivalence
descriptions
statement
wondered
talked
seemed backwards
appears naturally
§ proof
put
long enough
prove
states
ct ),
theorem
two steps
proceed
exponential
general case
exponential components
steps prove
together
call g
pieces
assemble
∑ _n g
g )[ k
n complex numbers
call f
∑ _k f
f )[ n
∑ _m f
another index
commutative
could equivalently write
frequency k
call e_k
e_k
plugging e_k
second definition
convolution yields
∑ _m exp
e_k g )[ n
first term
pull
∑ _m exp (- 2 π
recognize
time ).
multiplying e_k
k ].
eigenvector
proof
second part
complex exponentials
output component
k ],
first part
k ], based
magnitude f
plugging
e_k yields
thus
right hand side
product f g
g ):
substituting f
qed
chap10soln
describe convolution
linear convolution
operation corresponds
circular convolution
output contains
wraps around
extra note
fortunately
standard solution
add enough zeros
avoid wrap
eliminates
open air library provides
“ centralized ...
line resource
auralization
anyone interested
acoustical impulse response
openairlib
net >).
browse
data ” (< http :// www
impulse response data
download one
sounds interesting
short recording
sample rate
space
measured
convolving
computed two way
modulation
sampling
000 hz
chapter explores
presents
explains aliasing
sampling theorem
exploring
explain amplitude modulation
chap11
thinkdsp11 >.
ref >, convolution
making shifted
read signal
beep
four impulses
top left
bottom left ).
lower left
decreasing loudness
four beeps
impulses makes shifted
§ amplitude modulation
amplitude modulation
top row
next row
last row
demodulation
pass filtering
demodulated signal
broadcast
among
transmitter
might contain
“ modulated ”
etc .)
“ carrier wave ”.
acts
frequency wave
suitable
typical
500 – 1600 khz
united states
am_broadcasting >).
broadcast signal
receiving end
“ demodulated ”
demodulation works
carrier wave
modulate
carrier
wave arrays elementwise
result sounds pretty bad
happening
modulated signal
contains two copies
original spectrum
minus 10 khz
plus
recall
simple cosine wave
two impulses
impulses makes
demodulate
third row
makes shifted
modulated spectrum contains two peaks
peak gets split
minus 20 khz
meet
get added together
0 khz
two copies end
sounds pretty good
extra copies
spectrum add high frequency components
good ears
good speakers
get rid
extra components
quite close
lost
demodulating
receiving
amplify
transmitting
issue
result anyway
another factor
§ sampling
explained amplitude modulation
“ sampling ”
help us understand sampling
mostly
analog signal
equal spacing
wav files
analog
microphone using
converter
adc ).
1 khz
“ cd quality ” sound
standard rate
48 khz
dvd sound
24 khz
hearing_range >).
16 bits
“ bit depth ” turns
16 distinct levels
sound quality noticeably
improve
bits
digital_audio >).
audio signals might require higher
course
sampling rates
capture higher frequencies
bit
reproduce waveforms
fidelity
depth
sampling process
wave sampled
11 khz
select samples
drum solo
select every fourth element
sampled wave
sampling process introduces high
contains four copies
five copies
highest
frequencies ).
impulse train
copies come
using sample
train
shows two examples
025 hz
frequency 11
get 4 copies
4 impulses
bottom row shows
5512 hz
lower frequency
8 impulses
domain correspond
fewer impulses
impulse train corresponds
impulse train makes multiple copies
top ), spectrum
second row ), spectrum
third row ),
got rid
perfect solution
extend
contains high frequency components
past 10 khz
second row ),
makes copies
third row ).
result back
two problems
result sounds muted
quite right
leftover
include contributions
spectral copies
tried
top ),
bass guitar solo
spectral copies overlap
things work
pretty well
second example
loaded
top row ),
visible energy
second row shows
third row shows
filtered
almost exactly
convert back
§ interpolation
brick wall low
called brick
low pass filter
last step
wall filter
removed completely
hit
brick wall
filter looks like
normalized sinc function
sinc_function >):
π x
sinc
sinπ x
sinc function
every
zero point
interpolate
sampled points
adding shifted
interpolation
works using
line across
sampled values
thin
vertical gray lines show
curves
sinc functions
last sentence
might seem
contained
original spectrum exactly
resampled
resampling
gap
original signal contains components
025 khz
exceed half
copies overlap
“ bandwidth limited ”;
lose
original signal exactly
shannon sampling theorem
known
shannon_sampling_theorem >).
helps
says
original sampling rate
continuous analog
framerate f
signal exactly
chap11soln
chris “ monty ” montgomery
tell ”;
digital show
excellent information
action
presents lots
ciq9ixsuzum >.
folding frequency get aliased
longer possible
lower frequencies
pass filter used
purpose
aliasing filter
anti
drum solo example
spectral copies introduced
filtered signal
